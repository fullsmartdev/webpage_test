#!/usr/bin/env node

/**
 * Copyright (c) 2013, Twitter Inc. and other contributors
 * Released under the MIT License
 */

var program     = require('commander'),
    fs          = require('fs'),
    WebPageTest = require('../lib/webpagetest'),
    mapping     = require('../lib/mapping');

var command, wpt, file, ret,
    options = {},
    args = [],
    defaultServer = process.env.WEBPAGETEST_SERVER ||
      WebPageTest.defaultServer;

// replace default values on descriptons
mapping.commands.listen.info =
  mapping.commands.listen.info.replace('%s', WebPageTest.defaultListenPort);

function output(data, exitStatus, preExit) {
  if (exitStatus) {
    process.stderr.write(data);
  } else {
    process.stdout.write(data);
  }
  if (typeof preExit === 'function') {
    preExit();
  }
  process.exit(exitStatus || 0);
}

var formatData = function (err, data, info) {
  var encoding = 'utf8';

  if (err) {
    data = {error: err};
  } else if (info) {
    encoding = info.encoding;
    if (encoding === 'binary') {
      data = new Buffer(data, 'binary');
      type = info.type;
    } else {
      data = {type: info.type, data: data};
    }
  }

  if (!(data instanceof Buffer)) {
    try {
      data = JSON.stringify(data, null, 2);
    } catch (ex) {
      data = JSON.stringify({
        data: data.toString(),
        error: ex.message
      }, null, 2);
    }
  }

  if (file) {
    fs.writeFile(file, data, encoding, function writeFile(err) {
      if (err) {
        output(err.message, 1);
      }
    });
  } else {
    output(data);
  }
}

function addOptions(prg, options) {
  (options || []).forEach(function eachOption(option) {
    Object.keys(option).forEach(function eachOpt(name) {
      var opt = option[name],
          openParam = '<',
          closeParam = '>';

      // bail shorthands
      if (name == opt.key) {
        return;
      }

      if (opt.optional) {
        openParam = '[';
        closeParam = ']';
      }

      prg.option([
          opt.key ? ('-' + opt.key + ', ') : '    ',
          '--' + name,
          opt.param ? (' ' + openParam + opt.param + closeParam) : ''
        ].join(''),
        name === 'server' ? opt.info.replace('%s', defaultServer) : opt.info
      );
    });
  });
}

// global options
addOptions(
  program.version(WebPageTest.version),
  [mapping.options.common, {
    'out': {
      key: 'o',
      param: 'file',
      info: 'place the output into <file>. Defaults to stdout'
    }
  }]
);

Object.keys(mapping.commands).forEach(function eachCommand(name) {
  var param,
      openParam = '<',
      closeParam = '>',
      cmd = mapping.commands[name];

  function defaultAction(param, opts) {
    command = cmd.name;
    if (cmd.param) {
      args.push(param);
    }
    if (cmd.options) {
      options = mapping.setOptions(name, opts);
    }
  }

  var customActions = {
    'test': function(what, opts) {
      // check for script file
      if (fs.existsSync(what) && fs.statSync(what).isFile()) {
        what = fs.readFileSync(what, 'utf8');
      }

      defaultAction(decodeURIComponent(what), opts);
    },
    'listen': function(port) {
      defaultAction(port);
      options = undefined;
      formatData = function customFormat(err, data) {
        if (err) {
          output(JSON.stringify({error: err}, null, 2), 1);
        } else {
          process.stderr.write('server listening on ' + data.url);
        }
      };
    }
  };

  // command with (optional) parameter 
  if (cmd.param) {
    if (cmd.optional) {
      openParam = '[';
      closeParam = ']';
    }
    param = [name, ' ', openParam, cmd.param, closeParam].join('');
  } else {
    param = name;
  }

  addOptions(
    program
      .command(param)
      .description(cmd.info)
      .action(customActions[name] || defaultAction),
    cmd.options
  );
});

program.parse(process.argv);

if (command) {
  wpt = new WebPageTest(program.server || defaultServer);

  // options
  if (options) {
    options.dryRun = program.dryrun;
    args.push(options);
  }

  // callback
  args.push(formatData);

  file = program.out;

  wpt[command].apply(wpt, args);
} else {
  output(program.helpInformation(), 1, function defaultHelp() {
    program.emit('--help');
  });
}
